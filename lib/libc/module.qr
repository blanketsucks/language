pub type size_t = usize;

pub type in_addr_t = u32;
pub type socklen_t = u32;

pub const STDIN_FILENO  = 0;
pub const STDOUT_FILENO = 1;
pub const STDERR_FILENO = 2;

pub const O_APPEND = 1024;
pub const O_ASYNC = 8192;
pub const O_CLOEXEC = 524288;
pub const O_CREAT = 64;
pub const O_TRUNC = 512;
pub const O_RDONLY = 0;
pub const O_WRONLY = 1;
pub const O_RDWR = 2;

pub const SEEK_END = 2;
pub const SEEK_SET = 0;

pub const AF_UNSPEC = 0;
pub const AF_UNIX = 1;
pub const AF_INET = 2;
pub const AF_INET6 = 10;

pub const SOCK_STREAM = 1;
pub const SOCK_DGRAM = 2;
pub const SOCK_RAW = 3;

pub const IP_ADDRANY = 0;

pub const SHUT_RD = 0;
pub const SHUT_WR = 1;
pub const SHUT_RDWR = 2;

pub const SOL_SOCKET = 1;
pub const SO_REUSEADDR = 2;
pub const SO_REUSEPORT = 15;
pub const SO_KEEPALIVE = 9;
pub const SO_LINGER = 13;
pub const SO_RCVBUF = 8;
    
struct FILE;

pub struct sockaddr {
    pub sa_len: i8;
    pub sa_family: i8;
    pub sa_data: [i8; 14];
}

pub struct in_addr {
    pub s_addr: in_addr_t;
}

pub struct sockaddr_in {
    pub sin_family: i8;
    pub sin_port: i16;
    pub sin_addr: in_addr;
    pub sin_zero: [i8; 8];
}

pub struct hostent {
    pub h_name: *i8;
    pub h_aliases: **i8;
    pub h_addrtype: i32;
    pub h_length: i32;
    pub h_addr_list: **i8;
}

# TODO: Some syntax to allow for all fields to be public would be nice
pub struct addrinfo {
    pub ai_flags: i32;
    pub ai_family: i32;
    pub ai_socktype: i32;
    pub ai_protocol: i32;
    pub ai_addrlen: socklen_t;
    pub ai_addr: *sockaddr;
    pub ai_canonname: *i8;
    pub ai_next: *addrinfo;
}

pub extern "C" {
    func open(path: *i8, flags: i32, mode: i32) -> i32;
    func read(fd: i32, buf: *void, n: i32) -> i32;
    func write(fd: i32, buf: *void, n: i32) -> i32;
    func close(fd: i32) -> i32;

    func fopen(path: *i8, mode: *i8) -> *FILE;
    func fdopen(fd: i32, mode: *i8) -> *FILE;
    func freopen(path: *i8, mode: *i8, stream: *FILE) -> *FILE;
    func fclose(stream: *FILE) -> i32;
    func fflush(stream: *FILE) -> i32;

    func fgetc(stream: *FILE) -> i32;
    func fgets(buf: *i8, n: i32, stream: *FILE) -> *i8;
    func getc(stream: *FILE) -> i32;
    func getchar() -> i32;
    func ungetc(c: i32, stream: *FILE) -> i32;

    func fputc(c: i32, stream: *FILE) -> i32;
    func fputs(s: *i8, stream: *FILE) -> i32;
    func putc(c: i32, stream: *FILE) -> i32;
    func putchar(c: i32) -> i32;
    func puts(s: *i8) -> i32;

    func fread(buf: *i8, size: i32, n: size_t, stream: *FILE) -> size_t;
    func fwrite(buf: *i8, size: i32, n: size_t, stream: *FILE) -> size_t;

    func fseek(stream: *FILE, offset: i32, whence: i32) -> i32;
    func ftell(stream: *FILE) -> i64;
    func rewind(stream: *FILE);
    func fgetpos(stream: *FILE, pos: *i32) -> i32;
    func fsetpos(stream: *FILE, pos: *i32) -> i32;

    func clearerr(stream: *FILE);
    func feof(stream: *FILE) -> i32;
    func ferror(stream: *FILE) -> i32;
    func fileno(stream: *FILE) -> i32;

    func printf(fmt: *i8, ...) -> i32;
    func fprintf(stream: *FILE, fmt: *i8, ...) -> i32;
    func dprintf(fd: i32, fmt: *i8, ...) -> i32;
    func sprintf(buf: *i8, fmt: *i8, ...) -> i32;
    func snprintf(buf: *i8, n: i32, fmt: *i8, ...) -> i32;

    func malloc(size: size_t) -> *mut void;
    func calloc(nmemb: i32, size: i32) -> *mut void;
    func realloc(ptr: *void, size: size_t) -> *mut void;
    func reallocarray(ptr: *void, nmemb: i32, size: i32) -> *mut void;
    func free(ptr: *void);

    func memcpy(dest: *void, src: *void, size: size_t) -> *void;
    func memset(dest: *void, c: i32, size: size_t) -> *void;
    func memmove(dest: *void, src: *void, size: size_t) -> *void;
    func memcmp(s1: *void, s2: *void, size: size_t) -> i32;
    func memchr(s: *void, c: i32, size: size_t) -> *void;
    func memrchr(s: *void, c: i32, size: size_t) -> *void;
    func memmem(s: *void, n: i32, needle: *void, m: i32) -> *void;

    func strlen(s: *i8) -> size_t;
    func strcmp(s1: *i8, s2: *i8) -> i32;
    func strncmp(s1: *i8, s2: *i8, n: i32) -> i32;
    func strcasecmp(s1: *i8, s2: *i8) -> i32;
    func strncasecmp(s1: *i8, s2: *i8, n: i32) -> i32;
    func strchr(s: *i8, c: i32) -> *i8;
    func strrchr(s: *i8, c: i32) -> *i8;
    func strstr(haystack: *i8, needle: *i8) -> *i8;
    func strcasestr(haystack: *i8, needle: *i8) -> *i8;
    func strtok(s: *i8, delim: *i8) -> *i8;
    func strtok_r(s: *i8, delim: *i8, save_ptr: **i8) -> *i8;
    func strdup(s: *i8) -> *i8;
    func strndup(s: *i8, n: i32) -> *i8;
    func strnlen(s: *i8, n: i32) -> i32;
    func strspn(s: *i8, accept: *i8) -> i32;
    func strcspn(s: *i8, reject: *i8) -> i32;
    func strpbrk(s: *i8, accept: *i8) -> *i8;
    func strsep(s: *i8, delim: *i8) -> *i8;
    func strcoll(s1: *i8, s2: *i8) -> i32;
    func strncpy(dest: *i8, src: *i8, n: i32) -> *i8;
    func strcat(dest: *i8, src: *i8) -> *i8;
    func strncat(dest: *i8, src: *i8, n: i32) -> *i8;

    func isalnum(c: i32) -> i32;
    func isalpha(c: i32) -> i32;
    func isblank(c: i32) -> i32;
    func iscntrl(c: i32) -> i32;
    func isdigit(c: i32) -> i32;
    func isgraph(c: i32) -> i32;
    func islower(c: i32) -> i32;
    func isprint(c: i32) -> i32;
    func ispunct(c: i32) -> i32;
    func isspace(c: i32) -> i32;
    func isupper(c: i32) -> i32;
    func isxdigit(c: i32) -> i32;

    func tolower(c: i32) -> i32;
    func toupper(c: i32) -> i32;
    func toascii(c: i32) -> i32;

    func atoi(s: *i8) -> i32;
    func atol(s: *i8) -> i64;
    func atoll(s: *i8) -> i64;
    func atof(s: *i8) -> f32;

    func sleep(seconds: i32) -> i32;

    func socket(domain: i32, typ: i32, protocol: i32) -> i32;
    func bind(sockfd: i32, addr: *sockaddr, addrlen: i32) -> i32;
    func listen(sockfd: i32, backlog: i32) -> i32;
    func accept(sockfd: i32, addr: *sockaddr, addrlen: *i32) -> i32;
    func recv(sockfd: i32, buf: *i8, len: i32, flags: i32) -> i32;
    func send(sockfd: i32, buf: *i8, len: i32, flags: i32) -> i32;
    func connect(sockfd: i32, addr: *sockaddr, addrlen: socklen_t) -> i32;

    func htons(hostshort: i16) -> i16;
    func htonl(hostlong: i32) -> i32;
    func ntohs(netshort: i16) -> i16;
    func ntohl(netlong: i32) -> i32;
    
    func inet_aton(cp: *i8, addr: *in_addr) -> i32;
    func inet_pton(af: i32, src: *i8, dst: *i8) -> i32;
    func inet_ntoa(addr: in_addr) -> *i8;
    func inet_addr(cp: *i8) -> in_addr_t;

    func gethostbyname(name: *i8) -> *hostent;
    func getaddrinfo(node: *i8, service: *i8, hints: *addrinfo, res: **addrinfo) -> i32;
    func freeaddrinfo(res: *addrinfo) -> i32;

    func getpeername(sockfd: i32, addr: *sockaddr, addrlen: *i32) -> i32;
    func getsockname(sockfd: i32, addr: *sockaddr, addrlen: *i32) -> i32;

    func getsockopt(sockfd: i32, level: i32, optname: i32, optval: *i8, optlen: *i32) -> i32;
    func setsockopt(sockfd: i32, level: i32, optname: i32, optval: *i8, optlen: i32) -> i32;

    func shutdown(sockfd: i32, how: i32) -> i32;

    ![noreturn] func exit(code: i32);

    func atexit(f: func() -> void);

    func strerror(err: i32) -> *i8;
    func perror(s: *i8);

    func __errno_location() -> *i32;
    func __h_errno_location() -> *i32;
}
