
struct sockaddr {
    sa_len: i8;
    sa_family: i8;
    sa_data: [i8; 14];
}

struct in_addr {
    s_addr: i32;
}

struct sockaddr_in {
    sin_len: i8;
    sin_family: i8;
    sin_port: i16;
    sin_addr: in_addr;
    sin_zero: [i8; 8];
}

struct hostent {
    h_name: i8*;
    h_aliases: i8**;
    h_addrtype: i16;
    h_length: i16;
    h_addr_list: i8**;
}

struct addrinfo {
    ai_flags: i32;
    ai_family: i32;
    ai_socktype: i32;
    ai_protocol: i32;
    ai_addrlen: i64;
    ai_addr: sockaddr*;
    ai_canonname: i8*;
    ai_next: addrinfo*;
}

extern "C" {
    func socket(domain: i32, typ: i32, protocol: i32) -> i32;
    func bind(sockfd: i32, addr: sockaddr*, addrlen: i32) -> i32;
    func listen(sockfd: i32, backlog: i32) -> i32;
    func accept(sockfd: i32, addr: sockaddr*, addrlen: i32*) -> i32;
    func recv(sockfd: i32, buf: i8*, len: i32, flags: i32) -> i32;
    func send(sockfd: i32, buf: i8*, len: i32, flags: i32) -> i32;
    func connect(sockfd: i32, addr: sockaddr*, addrlen: i32) -> i32;

    func htons(hostshort: i16) -> i16;
    
    func inet_pton(af: i32, src: i8*, dst: i8*) -> i32;

    func gethostbyname(name: i8*) -> hostent*;
    func getaddrinfo(node: i8*, service: i8*, hints: addrinfo*, res: addrinfo**) -> i32;
    func freeaddrinfo(res: addrinfo*) -> i32;
}

enum SocketDomain {
    UNIX = 1,
    INET = 2,
    INET6 = 10,
}

enum SocketType {
    STREAM = 1,
    DGRAM = 2,
    RAW = 3,
}

enum SocketProtocol {
    TCP = 6,
    UDP = 17,
}

enum SocketFlag {
    NONBLOCK = 64
}