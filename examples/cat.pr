$include "libc/include.pr"

func main(argc: int, argv: char**) -> int {
    let stderr = libc::fdopen(2, "w");
    if (argc < 2) {
        libc::fprintf(stderr, "Usage: %s [filenames...]\n", argv[0]);
        return 1;
    }

    for (i = 1; i < argc; i += 1) {
        let filename = argv[i];
        let file = libc::fopen(filename, "r");

        if (!file) {
            # We don't have access to `errno` so we use `__errno_location` instead, we can have `errno` to be a macro
            # but idk about that. We could also use `perror` instead of doing all of this.

            # https://refspecs.linuxbase.org/LSB_3.1.0/LSB-generic/LSB-generic/baselib-errno-location-1.html
            let errno = *libc::__errno_location();
            libc::fprintf(stderr, "Could not open file '%s': %s\n", filename, libc::strerror(errno));

            return 1;
        }

        libc::fseek(file, 0, SEEK_END);
        let size = libc::ftell(file);

        if (size == 0) { # Empty file
            libc::fclose(file);
            continue;
        }

        libc::fseek(file, 0, SEEK_SET);
        let buffer = libc::malloc(size) as char*;

        let n = libc::fread(buffer, 1, size, file);
        if (n != size) {
            if (libc::ferror(file)) {
                let errno = *libc::__errno_location();
                libc::fprintf(stderr, "Could not read file '%s': %s\n", filename, libc::strerror(errno));

                return 1;
            }

            libc::fprintf(stderr, "Could not read file '%s': Unknown error.", filename);
            return 1;
        }

        libc::printf("%s\n", buffer);

        libc::free(buffer);
        libc::fclose(file);
    }
    
    return 0;
}