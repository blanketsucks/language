import libc;

const stderr = libc::fdopen(2, "w");

func read_from_filename(filename: char*) -> char* {
    let file = libc::fopen(filename, "r");
    if (!file) {
        # We don't have access to `errno` so we use `__errno_location` instead, we can have `errno` to be a macro
        # but idk about that. We could also use `perror` instead of doing all of this.

        # https://refspecs.linuxbase.org/LSB_3.1.0/LSB-generic/LSB-generic/baselib-errno-location-1.html
        let errno = *libc::__errno_location();
        libc::fprintf(stderr, "Could not open file '%s': %s\n", filename, libc::strerror(errno));

        libc::exit(1);
    }

    defer libc::fclose(file);
    libc::fseek(file, 0, libc::SEEK_END);

    let size = libc::ftell(file);
    if (size == 0) { # Empty file
        return null;
    }

    libc::fseek(file, 0, libc::SEEK_SET);
    let buffer = libc::malloc(size) as char*;

    let n = libc::fread(buffer, 1, size, file);
    if (n != size) {
        if (libc::ferror(file)) {
            let errno = *libc::__errno_location();
            libc::fprintf(stderr, "Could not read file '%s': %s\n", filename, libc::strerror(errno));

            libc::exit(1);
        }

        libc::fprintf(stderr, "Could not read file '%s': Unknown error.", filename);
        libc::exit(1);
    }

    return buffer;
}

func main(argc: int, argv: char**) -> int {
    if (argc < 2) {
        libc::fprintf(stderr, "Usage: %s [filenames...]\n", argv[0]);
        return 1;
    }

    for (i = 1; i < argc; i += 1) {
        let filename = argv[i];
        let buffer = read_from_filename(filename);

        if (buffer) {
            libc::printf("%s\n", buffer);
            libc::free(buffer);
        }
    }
    
    return 0;
}