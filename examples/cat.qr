import libc;
import libc::errno;

const stderr = libc::fdopen(2, "w");

func read_from_filename(filename: *i8) -> *i8 {
    let file = libc::fopen(filename, "r");
    if !file {
        let errno = *libc::errno::__errno_location();
        libc::fprintf(stderr, "Could not open file '%s': %s\n", filename, libc::errno::strerror(errno));

        return null;
    }

    libc::fseek(file, 0, libc::SEEK_END);
    let size = libc::ftell(file);
    
    if !size { # Empty file
        libc::fclose(file); return null;
    }

    libc::fseek(file, 0, libc::SEEK_SET);
    let buffer = libc::malloc(size) as *i8;

    let n = libc::fread(buffer, 1, size, file);
    if n != size {
        if libc::ferror(file) {
            let errno = *libc::errno::__errno_location();
            libc::fprintf(stderr, "Could not read file '%s': %s\n", filename, libc::errno::strerror(errno));
        } else {
            libc::fprintf(stderr, "Could not read file '%s': Unknown error.\n", filename);
        }

        libc::fclose(file);
        libc::free(buffer);

        return null;
    }

    libc::fclose(file);
    return buffer;
}

func main(argc: i32, argv: **i8) -> i32 {
    if argc < 2 {
        libc::fprintf(stderr, "Usage: %s [filenames...]\n", argv[0]);
        return 1;
    }

    for i in 1..argc {
        let filename = argv[i];
        let buffer = read_from_filename(filename);

        if (buffer) {
            libc::printf("%s\n", buffer);
            libc::free(buffer);
        }
    }
    
    return 0;
}